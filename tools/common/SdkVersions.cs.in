using System;

#if MTOUCH || MMP
using Xamarin.Bundler;
using Xamarin.Utils;
#endif

#if MTOUCH
using MonoTouch;
#endif

namespace Xamarin {
	static class SdkVersions {
		public const string Xcode = "@XCODE_VERSION@";
		public const string OSX = "@OSX_SDK_VERSION@";
		public const string iOS = "@IOS_SDK_VERSION@";
		public const string WatchOS = "@WATCHOS_SDK_VERSION@";
		public const string TVOS = "@TVOS_SDK_VERSION@";

		public const string MinOSX = "@MIN_OSX_SDK_VERSION@";
		public const string MiniOS = "@MIN_IOS_SDK_VERSION@";
		public const string MinWatchOS = "@MIN_WATCHOS_SDK_VERSION@";
		public const string MinTVOS = "@MIN_TVOS_SDK_VERSION@";

		public const string MiniOSSimulator = "@MIN_IOS_SIMULATOR_VERSION@";
		public const string MinWatchOSSimulator = "@MIN_WATCHOS_SIMULATOR_VERSION@";
		public const string MinWatchOSCompanionSimulator = "@MIN_WATCHOS_COMPANION_SIMULATOR_VERSION@";
		public const string MinTVOSSimulator = "@MIN_TVOS_SIMULATOR_VERSION@";

		public const string MaxiOSSimulator = "@MAX_IOS_VERSION@";
		public const string MaxWatchOSSimulator = "@MAX_WATCH_VERSION@";
		public const string MaxWatchOSCompanionSimulator = "@MAX_IOS_VERSION@";
		public const string MaxTVOSSimulator = "@MAX_TVOS_VERSION@";

		public static Version OSXVersion { get { return new Version (OSX); }}
		public static Version iOSVersion { get { return new Version (iOS); }}
		public static Version WatchOSVersion { get { return new Version (WatchOS); }}
		public static Version TVOSVersion { get { return new Version (TVOS); }}

		public static Version MinOSXVersion { get { return new Version (MinOSX); }}
		public static Version MiniOSVersion { get { return new Version (MiniOS); }}
		public static Version MinWatchOSVersion { get { return new Version (MinWatchOS); }}
		public static Version MinTVOSVersion { get { return new Version (MinTVOS); }}

		public static Version MiniOSSimulatorVersion { get { return new Version (MiniOSSimulator); }}
		public static Version MinWatchOSSimulatorVersion { get { return new Version (MinWatchOSSimulator); }}
		public static Version MinWatchOSCompanionSimulatorVersion { get { return new Version (MinWatchOSCompanionSimulator); }}
		public static Version MinTVOSSimulatorVersion { get { return new Version (MinTVOSSimulator); }}

		public static Version MaxiOSSimulatorVersion { get { return new Version (MaxiOSSimulator); }}
		public static Version MaxWatchOSSimulatorVersion { get { return new Version (MaxWatchOSSimulator); }}
		public static Version MaxWatchOSCompanionSimulatorVersion { get { return new Version (MaxWatchOSCompanionSimulator); }}
		public static Version MaxTVOSSimulatorVersion { get { return new Version (MaxTVOSSimulator); }}

		public static Version XcodeVersion { get { return new Version (Xcode); }}

#if MTOUCH || MMP
		public static Version GetVersion (ApplePlatform platform)
		{
			switch (platform) {
			case ApplePlatform.MacOSX: return OSXVersion;
			case ApplePlatform.iOS: return iOSVersion;
			case ApplePlatform.WatchOS: return WatchOSVersion;
			case ApplePlatform.TVOS: return TVOSVersion;
			default:
				throw ErrorHelper.CreateError (71, "Unknown platform: {0}. This usually indicates a bug in {1}; please file a bug report at https://github.com/xamarin/xamarin-macios/issues/new with a test case.", platform, Application.ProductName);
			}
		}

		public static Version GetMinVersion (ApplePlatform platform)
		{
			switch (platform) {
			case ApplePlatform.MacOSX: return MinOSXVersion;
			case ApplePlatform.iOS: return MiniOSVersion;
			case ApplePlatform.WatchOS: return MinWatchOSVersion;
			case ApplePlatform.TVOS: return MinTVOSVersion;
			default:
				throw ErrorHelper.CreateError (71, "Unknown platform: {0}. This usually indicates a bug in {1}; please file a bug report at https://github.com/xamarin/xamarin-macios/issues/new with a test case.", platform, Application.ProductName);
			}
		}
#endif

	}

#if MMP
	static class MonoVersions {
		public static string MinimumMono = "@MIN_XM_MONO_VERSION@";
		public static Version MinimumMonoVersion { get { return new Version (MinimumMono); }}
	}
#endif
}
